import time
from locust import HttpUser, task, between

class QuickstartUser(HttpUser):
    wait_time = between(1, 5)

    @task
    def blocks(self):
        # Get the block height by its Base58-encoded signature
        signature = "Anb4BgETSgGeT5Qibe3kx61BLEwHWAhdhor4AFaDkNiMX7ysh9SRi5rTAksxpZQNJJhoNkYYekfXsqxZxdYhZMG"
        self.client.get("/blocks/height/%s" % signature)

        # Get the last block data
        self.client.get("/blocks/last")

        # Get the average delay in milliseconds between last blockNum blocks starting from block with signature
        signature = "Anb4BgETSgGeT5Qibe3kx61BLEwHWAhdhor4AFaDkNiMX7ysh9SRi5rTAksxpZQNJJhoNkYYekfXsqxZxdYhZMG"
        blockNum = 20641155
        self.client.get("/blocks/delay/%s/%s" % (signature, blockNum))

        # Get blockchain height
        self.client.get("/blocks/height")

        # # Broadcast the checkpoint of blocks
        # blocks_checkpoint_data = {
        #                             "items": [
        #                                 {
        #                                 "height": blockNum,
        #                                 "signature": signature
        #                                 }
        #                             ],
        #                             "signature": signature
        #                         }
        # self.client.post("/blocks/checkpoint", json=blocks_checkpoint_data) 

        # # Get a block list generated by a specified address and a block height range (from/to)
        # address = ""
        # from_block = ""
        # to_block = ""
        # self.client.get("/blocks/address/%s/%s/%s", (address, from_block, to_block)) 

        # Get block at specified height
        height = "20641155"
        self.client.get("/blocks/at/%s" % height)

        # Get children of a specified block by the base58-encoded signature
        signature = "Anb4BgETSgGeT5Qibe3kx61BLEwHWAhdhor4AFaDkNiMX7ysh9SRi5rTAksxpZQNJJhoNkYYekfXsqxZxdYhZMG"
        self.client.get("/blocks/child/%s" % signature)

        # Get block by a specified Base58-encoded signature
        signature = "Anb4BgETSgGeT5Qibe3kx61BLEwHWAhdhor4AFaDkNiMX7ysh9SRi5rTAksxpZQNJJhoNkYYekfXsqxZxdYhZMG"
        self.client.get("/blocks/signature/%s" % signature)

        # Get block at the specified height range (from/to)
        from_block = "20641105"
        to_block = "20641155"
        self.client.get("/blocks/seq/%s/%s" % (from_block, to_block))

        # Get the genesis block data
        self.client.get("/blocks/first")

    
    @task
    def node(self):
        # Get status of the running core
        self.client.get("/node/status")

        # Get VSYS node version
        self.client.get("/node/status")


    @task
    def peers(self):
        # Get the peer list
        self.client.get("/peers/all")

        # Get the suspended peers list
        self.client.get("/peers/suspended")

        # # Connect to peer
        # data = {
        #         "host": "127.0.0.1",
        #         "port": 0
        #         }
        # self.client.post("/peers/connect", json=data)


        # Get the connected peers list
        self.client.get("/peers/connected")

        # Get the blacklisted peers list
        self.client.get("/peers/blacklisted")


    @task
    def transactions(self):
        # Get a list of unconfirmed transactions
        self.client.get("/transactions/unconfirmed")

        # Get the number of transactions in the unconfirmed transactions(UTX) pool
        self.client.get("/transactions/unconfirmed/size") 

        # Get transaction info by a specified transaction id
        id = "GYgsN8vHxMY2EiPQpyTTNRrGLQDP5XptbgUgQEF2Jgvx"
        self.client.get("/transactions/info/%s" % id)  

        # Get list of transactions where specified address (wallet address or contract address) has been involved
        address = "AUAztxsft2v6rmjRRb72nLea6BNyRHHWpUR"
        limit = "10"
        self.client.get("/transactions/address/%s/limit/%s" % (address, limit))

        # # Get the unconfirmed transaction by a specified transaction id
        # id = "GYgsN8vHxMY2EiPQpyTTNRrGLQDP5XptbgUgQEF2Jgvx"
        # self.client.get("/transactions/unconfirmed/info/%s" % id) 

        # # Get a list of active lease transactions by a specified address
        # address = "AUAztxsft2v6rmjRRb72nLea6BNyRHHWpUR"
        # self.client.get("/transactions/activeLeaseList/%s" % address)

        # Get count of transactions where specified address (wallet address or contract address) has been involved. This is a custom api, you need to enable it in configuration file.
        # data = {
        #         "address": "AUAztxsft2v6rmjRRb72nLea6BNyRHHWpUR",
        #         "txType": 2
        #         }
        address = "AUAztxsft2v6rmjRRb72nLea6BNyRHHWpUR"
        txType = 2 
        self.client.get("/transactions/count?address=%s&txType=%s" % (address, txType)) 

        # Get list of transactions where specified address (wallet address or contract address) has been involved. This is a custom api, you need to enable it in configuration file.
        # data = {
        #         "address": "AUAztxsft2v6rmjRRb72nLea6BNyRHHWpUR",
        #         "txType": 2,
        #         "limit": 1,
        #         "offset": 10
        #         }
        address = "AUAztxsft2v6rmjRRb72nLea6BNyRHHWpUR"
        txType = 2
        limit = 1
        offset = 10
        self.client.get("/transactions/list?address=%s&txType=%s&limit=%s&offset=%s" % (address, txType, limit, offset))